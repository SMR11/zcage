.\" Man page generated from reStructuredText.
.
.TH "ZCAGE" "1" "Feb 26, 2019" "" "Zcage"
.SH NAME
zcage \- Zcage Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Zcage is a zone manager for Illumos written in nodejs, is inspired by FreeBSD’s
iocage and SmartOS’s vmadm, combining some of the best features of Illumos, like
crossbow and zones to create secure containers.
It’s intended to be easy to use with a simple command syntax.
.sp
\fBFEATURES:\fP
.INDENT 0.0
.IP \(bu 2
Easy to use
.IP \(bu 2
Rapid thin provisioning within seconds
.IP \(bu 2
Virtual networking stacks (Crossbow <\fI\%https://wiki.smartos.org/display/DOC/Networking+and+Network+Virtualization\fP>)
.IP \(bu 2
Resource control
.IP \(bu 2
Exclusive IP networking by default
.IP \(bu 2
Supports for brands sparse, ipkg, lipkg, bhyve and lx.
.IP \(bu 2
Import docker images to create lx branded zones
.UNINDENT
.SH DOCUMENTATION:
.SS Install zcage
.sp
zcage is a zone manager that takes advantage of the best features
and technologies from Illumos. It is intended to be
easy to use with a simple command line syntax. Visit the
\fI\%zcage github\fP for more information.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
zcage currently only works in Omniosce <\fI\%https://omniosce.org/\fP>
.UNINDENT
.UNINDENT
.SS Using github
.sp
To install from github, run this commands:
.sp
:samp:\(ga git clone \fI\%https://github.com/cneira/zcage.git\fP && cd zcage && pfexec npm install \-g\(ga
.SS Using npm
.sp
To install using npm
.. tip:: Currently there is a bug in npm 5.X so npm 4.X must be used to install \fI\%https://github.com/npm/npm/issues/16766\fP
.sp
:samp:\(ga npm install npm@4 \-g\(ga
:samp: \fInpm install zcage \-g\fP
.SS Required packages
.sp
To start creating zones the following packages are needed :
:command: \fIpkg install pkg:/system/zones/brand/lx\fP
:command: \fIpkg install system/bhyve\fP
:command: \fIpkg install system/zones/brand/bhyve\fP
:command: \fIpkg install brand/sparse\fP
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
If you are running Omnios Bloody you could create pkgsrc zones, for that you need the following package
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B command
\fIpkg install brand/pkgsrc\fP
.UNINDENT
.SS Basic Usage
.sp
This section is about basic zcage usage and is meant as a “how\-to”
reference for new users.
.sp
\fBTIP:\fP
.INDENT 0.0
.INDENT 3.5
Remember, command line help is always available by typing
\fBzcage help\fP\&.
.UNINDENT
.UNINDENT
.sp
zcage first needs to be activated before is able to create new zones
and interact with them.
.SS Activate zcage
.sp
Before zcage is able to create new zones, it needs to \fBactivate\fP\&.
this allows zcage to create all the zfs datasets needed for storing zones
and images. Also zcage checks if required packages are already installed.
.sp
Once zcage is ready  users are able to immediately
begin creating zones and downloading images for lx branded zones.
.sp
Fetching images is only needed when creating lx branded zones.
\fBzcage images \-\-list remote\fP lists linux images from Joyent’s repos.
Then users can choose which image to download, using
\fBzcage pull \-\-image <uuid>\fP as seen in this example:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C

.ft P
.fi
.UNINDENT
.UNINDENT
.sp
# zcage images –list  avail
UID                                        NAME               VERSION         OS                      PUBLISHED
f7c19252\-c998\-11e4\-be95\-3315493f3741       lx\-centos\-6        20150313        linux           2015\-03\-13T15:52:35Z
818cc79e\-ceb3\-11e4\-99ee\-7bc8c674e754       lx\-ubuntu\-14.04    20150320        linux           2015\-03\-20T03:45:09Z
116deb8c\-cf03\-11e4\-9b2d\-7b1066800a6a       lx\-debian\-7        20150320        linux           2015\-03\-20T13:14:41Z
eb4128ec\-cf12\-11e4\-960d\-8780cec6463f       lx\-centos\-6        20150320        linux           2015\-03\-20T15:08:0
.sp
# zcage pull –image 96bb1fac\-c87d\-11e5\-b5bf\-ff4703459205
# zcage images –list local
UUID                                       NAME               VERSION         OS                      PUBLISHED
96bb1fac\-c87d\-11e5\-b5bf\-ff4703459205       alpine\-3           20160201        linux           2016\-02\-01T00:49:02Z
.SS Create a Zone
.sp
There are five types of brands: \fBsparse\fP, \fBbhyve\fP, \fBlx\fP, \fBlipkg\fP and
\fBpkgsrc\fP\&. More details about these zone brands can be found in the
:ref :\fIZone brands\fP sections of this documentation.
.sp
Depending on the user’s requirements, the \fBcreate\fP subcommand
could create either zone brand. By default,
\fBzcage create\fP creates a \fBsparse\fP zone, but invoking the
\fB\-type\fP option changes the creation of the zone brand.
.sp
First we need to setup a virtual network interface using DLADM(1) <\fI\%https://illumos.org/man/1M/dladm\fP>.
Currently each zone needs to have a different vnic otherwise it won’t start.
.INDENT 0.0
.TP
.B command
\fIpfexec dladm create\-vnic \-l igb0 omni0\fP
.UNINDENT
.sp
Here is an example of creating a sparse zone using virtual network interface
omni0 using ip: 192.168.1.225/network mask, 192.168.1.1 as gateway and memory
capped to use 2GB of RAM.:
.sp
\fB# zcage create \-\-alias=test07 \-\-net "omni0|192.168.1.225/24|192.168.1.1" \-\-ram 2gb\fP
.sp
After a zone is created and running we could update it’s previously defined capped memory
also set or update a disk quota of the zfs dataset for that zone.
.INDENT 0.0
.TP
.B samp
\fI# zcage update \-z test07 –ram 4gb –quota 16G\fP
.UNINDENT
.sp
More information about zone properties are available
in \fIzcage github <https://github.com/cneira/zcage>\fP
.SS Listing Zones
.sp
To list all zones, use \fBzcage list\fP
.sp
To see all downloaded linux images, use \fBzcage images \-\-list local\fP
.sp
\&. index:: Zone start stop restart
.. _Start Stop Restart Zone:
.SS Start, Stop, or Restart a Zone
.sp
Zones can be started, stopped, or restarted at any time. By default, new
zones are  \fIdown\fP (stopped) state. To see the status of all zones,
use \fBzcage list\fP and read the \fBSTATE\fP column.
.sp
Use each zone’s UUID or alias to start, stop, or restart it.
.SS Start
.sp
Use \fBzcage start \-z <alias or UUID>\fP to start a zone.
.sp
\fBExamples:\fP
.sp
Start a zone with the alias \fBapache01\fP:
.sp
\fBzcage start \-z apache01\fP\&.
.sp
If no alias provided by the user, \fBzcage\fP
automatically assigns a complex UUID to a new zone. This UUID is always
usable when doing \fBzcage\fP operations like starting a zone:
.sp
\fB# zcage start \-z 26e8e027\-f00c\-11e4\-8f7f\-3c970e80eb61\fP
.sp
\&. index:: Zone Stop
.. _StopZone:
.SS Stop
.sp
\fBzcage stop\fP uses the same syntax as \fBzcage start\fP\&.
.sp
\fBExamples:\fP
.sp
\fB# zcage stop \-z www01\fP
.sp
\fB# zcage stop \-z 26e8e027\-f00c\-11e4\-8f7f\-3c970e80eb61\fP
.SS Reboot
.sp
\fBzcage reboot\fP also uses the same syntax as \fBstart\fP and
\fBstop\fP:
.sp
\fB# zcage reboot \-z apache01\fP
.sp
\fB# zcage reboot \-z 26e8e027\-f00c\-11e4\-8f7f\-3c970e80eb61\fP
.SS Get Zone information
.sp
To view all information for a zone use the \fBinfo\fP subcommand:
.sp
\fB# zcage info \-z apache01\fP
.SS Destroy a Zone
.sp
Destroy a specific zone using the \fBdestroy\fP subcommand:
.sp
\fB# zcage destroy \-z apache01\fP
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
This irreversibly destroys the zone.
.UNINDENT
.UNINDENT
.SS Networking
.sp
Zones created by :command: \fIzcage\fP are setup as an exclusive\-IP zone, this
means that each zone have its distinct IP layer configuration and state
(<\fI\%https://illumos.org/man/5/zones\fP>).
Network virtualization is provided by Crossbow <\fI\%https://wiki.smartos.org/display/DOC/Networking+and+Network+Virtualization\fP>.
.SS Creating Virtual Network Interfaces
.sp
\fBzcage\fP needs a virtual network interface (vnic)  per each zone ,these
are created using the \fBDLADM(1)\fP  command, for example this will create the vnic
vnic0 using the physical nic e1000g0:
.sp
\fB# dladm create\-vnic \-l e1000g0 vnic0\fP
.sp
Then later vnic0 could be use for \fBzcage create\fP when specifying network
properties.
.SS Configuring Zone networking
.sp
\fBIPv4\fP
.sp
\fB# zcage create \-\-alias=test07 \-\-net "vnic0|192.168.1.225/24|192.168.1.1" \-\-ram 2gb\fP
.sp
\fBIPv6\fP
.sp
\fB# zcage create \-\-alias=test07 \-\-net "vnic1|0:0:0:0:0:ffff:c0a8:1e1/24|0:0:0:0:0:ffff:c0a8:101" \-\-ram 2gb\fP
.sp
These examples creates a zone with IP \fI192.168.1.225/24\fP and \fI0:0:0:0:0:ffff:c0a8:1e1/24\fP using vnics \fIvnic1\fP and
\fIvnic0\fP\&.
.SS Brand Types
.sp
zcage supports the following zone brands:
.INDENT 0.0
.IP \(bu 2
sparse (default)
.IP \(bu 2
ipkg
.IP \(bu 2
lipkg
.IP \(bu 2
lx
.IP \(bu 2
bhyve
.UNINDENT
.sp
All brand types have specific benefits and drawbacks, serving a variety
of unique needs. This section describes and has creation examples for
each of these brand types.
.SS Sparse (default)
.sp
Sparse zones are created by default if –type is not specified.
.sp
\fB# zcage create \-\-alias=test07 \-\-net "omni0|192.168.1.225/24|192.168.1.1" \-\-ram 2gb\fP
.sp
In a sparse zone critical file systems like /usr, /lib, /etc, /platform etc are inherited from
the global zone to the non\-global zone as a read\-only loopback file system. This allows to use little
disk space and be created faster.
.SS Ipkg (ipkg)
.sp
Ipkg zones are creating by specifying –type ipkg on creation
.sp
\fB# zcage create \-\-alias=test07 \-\-net "omni0|192.168.1.225/24|192.168.1.1" \-\-type ipkg \-\-ram 2gb\fP
.sp
An ipkg zone gets its own writable copy of all file systems. Thus installation takes longer time than the sparse root zone.
.SS Lipkg (lipkg)
.sp
Lipkg zones are creating by specifying –type lipkg on creation
.sp
\fB# zcage create \-\-alias=test07 \-\-net "omni0|192.168.1.225/24|192.168.1.1" \-\-type lipkg \-\-ram 2gb\fP
.sp
Linked images link the packages in a zone to the global zone. If you update the global zone’s packages,
the linked\-image zones get updated alongside it. This means going forward, an upgrade with linked image zones does not
require detaching and reattaching the zone.
You can update zones on a running system (at the cost of losing some log state during the time of the upgrade and the time of a reboot), or you can simply halt the zones, do the upgrade, and reboot with all linked\-image zones automatically updated.
<\fI\%https://omniosce.org/info/linked_images.html\fP>.
.SS Linux Branded Zone (lx)
.sp
Linux branded zones are creating by specifying –type lx on creation, this type of brand needs an extra
parameter to be specified on creation ‘–image <image uuid>’ or ‘–docker <container image name>’.
.sp
When using the –image flag the user needs to specify an already download linux image, this image could be
downloaded using \fBzcage pull \-\-image\fP\&.
.sp
\fB#zcage images \-\-list remote\fP
.sp
\fB#zcage pull \-\-image  96bb1fac\-c87d\-11e5\-b5bf\-ff4703459205\fP
.sp
\fB# zcage create \-\-alias=test07 \-\-net "omni0|192.168.1.225/24|192.168.1.1" \-\-type lx \-\-ram 2gb \-\-with\-image 96bb1fac\-c87d\-11e5\-b5bf\-ff4703459205\fP
.sp
When using the –docker flag the user needs to specify the container image name from docker hub (<\fI\%https://hub.docker.com/search?q=&type=image\fP>) that will be used when creating the zone.
.INDENT 0.0
.TP
.B samp
\fI# zcage create –net “vnic0|192.168.1.225/24|192.168.1.1” –ram 2gb  –docker alpine/latest –alias lxvm –brand lx\fP
.UNINDENT
.SS Bhyve (bhyve)
.sp
Bhyve zones are creating by specifying –type bhyve on creation, this type of brand needs an extra
parameters to be specified on creation ‘–disk <zfs dataset> ‘
To create a bhyve branded zone, first we need to create a disk for it to use:
.sp
\fB# zfs create \-V 30G rpool/vm0\fP
.sp
\fB# zcage create \-\-brand bhyve \-\-net "net6|192.168.1.207/24|192.168.1.1" \-\-ram 2gb  \-\-alias bhyve0  \-\-disk=rpool/vm0\fP
.sp
This will create a bhyve zone that will use the dataset specified on the –disk parameter as a disk.
.sp
You could specify the iso which to use at boot using the –with\-iso option
.sp
\fB# zcage start \-z bhyve0 \-\-with\-iso /home/neirac/isos/FreeBSD\-11.2\-RELEASE\-amd64\-bootonly.iso\fP
.sp
Then you could connect to the newly created bhyve zone using vnc, to obtain the port just use the info command.
.sp
\fB# zcage info \-z bhyve0\fP
.sp
Or just use the serial terminal
.INDENT 0.0
.TP
.B samp
\fI# zlogin \-C bhyve0\fP
.UNINDENT
.sp
bhyve was originally integrated into FreeBSD by NetApp in around 2011 where it became part of the base system
with FreeBSD 10.0\-RELEASE. It continued to evolve and was ported to illumos by Pluribus Networks in around 2013 and
they contributed the resulting code to the illumos community in late 2017. From there, Joyent worked on integrating bhyve
into their illumos fork, bringing it up\-to\-date with bhyve from FreeBSD\-11.1 and making many improvements along the way.
The intention that they have stated is for them to continue to work closely with the FreeBSD maintainers so that improvements
make it back where appropriate.(<\fI\%https://omniosce.org/info/bhyve.html\fP>)
.SS Indices and tables
.INDENT 0.0
.IP \(bu 2
genindex
.IP \(bu 2
modindex
.IP \(bu 2
search
.UNINDENT
.SH AUTHOR
Carlos Neira
.SH COPYRIGHT
2019, Carlos Neira
.\" Generated by docutils manpage writer.
.
