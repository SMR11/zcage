#!/opt/ooce/bin/node --abort_on_uncaught_exception

const zone = require('zonelib');
const uuidv4 = require('uuid/v4');
const commandLineArgs = require('command-line-args')

let mainDefinitions = [{
    name: 'name',
    defaultOption: true
}]
const mainCommand = commandLineArgs(mainDefinitions, {
    stopAtFirstUnknown: true
})
let argv = mainCommand._unknown || []


switch (mainCommand.name) {

    case "create":
        const createDefinitions = [{
                name: 'alias',
                alias: 'a'
            },
            {
                name: 'brand',
                alias: 'b',
                defaultValue: "sparse"
            },
            {
                name: 'count',
                alias: 'c',
                defaultValue: 1
            },
            {
                name: 'net'
            },
            {
                name: 'boot',
                type: Boolean
            }
        ]
        const createOptions = commandLineArgs(createDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = createOptions._unknown || []


        if ("net" in createOptions) {
            var zname;
            createOptions["net"] =
                zone.ipaddrcmd2netobject(createOptions["net"]);
            if ("alias" in createOptions) {
                zname = createOptions["alias"];
                delete createOptions["alias"];
            } else {
                zname = uuidv4();
            }
            createOptions["zonepath"] = `/zones/${zname}`;
            var count = createOptions["count"];
            delete createOptions["count"];
            var z = zone.create_zone_spec(createOptions);
            if (zone.create(zname, z) == 0) {
                console.log("created vm : ", zname);
            }
            break;
        } else {
            console.log('Error missing --net=nic|ipaddr');
            break;
        }

    case "destroy":
        const destroyDefinitions = [{
            name: 'zonename',
            alias: 'z'
        }]
        const destroyOptions = commandLineArgs(destroyDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = destroyOptions._unknown || []

        if ("zonename" in destroyOptions) {
            zone.destroy(destroyOptions["zonename"]);
        } else {
            console.log("need zone name to destroy");
        }
        break;
    case "list":
        zone.listzones();
        break;
    case "start":
        const startDefinitions = [{
            name: 'zonename',
            alias: 'z'
        }]
        const startOptions = commandLineArgs(startDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = startOptions._unknown || []

        if ("zonename" in startOptions) {
            zone.start(startOptions["zonename"]);
        } else {
            console.log("need zonename to start");
        }
        break;
    case "stop":
        const stopDefinitions = [{
            name: 'zonename',
            alias: 'z'
        }]
        const stopOptions = commandLineArgs(stopDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = stopOptions._unknown || []

        if ("zonename" in stopOptions) {
            zone.halt(stopOptions["zonename"]);
        } else {
            console.log("need zonename to stop");
        }
        break;


    default:
        console.log("bad options");
        break;
}
