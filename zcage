#!/opt/ooce/bin/node --abort_on_uncaught_exception

const zone = require('zonelib');
const uuidv4 = require('uuid/v4');
const commandLineArgs = require('command-line-args');
const chalk = require('chalk');

let mainDefinitions = [{
    name: 'name',
    defaultOption: true
}]
const mainCommand = commandLineArgs(mainDefinitions, {
    stopAtFirstUnknown: true
})
let argv = mainCommand._unknown || []


switch (mainCommand.name) {

    case "create":
        const createDefinitions = [{
                name: 'alias',
                alias: 'a'
            },
            {
                name: 'brand',
                alias: 'b',
                defaultValue: "sparse"
            },
            {
                name: 'count',
                alias: 'c',
                defaultValue: 1
            },
            {
                name: 'net'
            },
            {
                name: 'boot',
                type: Boolean
            }
        ]
        const createOptions = commandLineArgs(createDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = createOptions._unknown || []
	console.log(chalk.blue('creating vm'));
	zone.build(createOptions);
		break;

    case "destroy":
        const destroyDefinitions = [{
            name: 'zonename',
            alias: 'z'
        }]
        const destroyOptions = commandLineArgs(destroyDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = destroyOptions._unknown || []

        if ("zonename" in destroyOptions) {
            zone.destroy(destroyOptions["zonename"]);
        } else {
            console.log("need zone name to destroy");
        }
        break;
    case "list":
	        const listDefinitions = [{
            name: 'state',
        }]
        const listOptions = commandLineArgs(listDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = listOptions._unknown || []

		console.log(chalk.blue('listing zones'));
		zone.listzones(listOptions);
        break;

    case "start":
        const startDefinitions = [{
            name: 'zonename',
            alias: 'z'
        }]
        const startOptions = commandLineArgs(startDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = startOptions._unknown || []

        if ("zonename" in startOptions) {
            zone.start(startOptions["zonename"]);
        } else {
            console.log("need zonename to start");
        }
        break;
    case "stop":
        const stopDefinitions = [{
            name: 'zonename',
            alias: 'z'
        }]
		const stopOptions = commandLineArgs(stopDefinitions, {
            argv,
            stopAtFirstUnknown: true
        })
        argv = stopOptions._unknown || []

        if ("zonename" in stopOptions) {
            zone.halt(stopOptions["zonename"]);
        } else {
            console.log("need zonename to stop");
        }
        break;


    default:
        console.log("bad options");
        break;
}
